/// <summary>
/// 持てるものの基底クラス。
/// </summary>
#pragma once
#include "StageObject.h"

class Belongings : public StageObject
{
public:

	Belongings();
	~Belongings();

	bool Start();
	void Update();



	/// <summary>
	/// 状態を入手する。
	/// </summary>
	/// <returns>状態</returns>
	int GetFoodState()
	{
		return m_foodState;
	}

	/// <summary>
	/// 食べ物か調理器具か。
	/// </summary>
	/// <returns>持てるオブジェクトが食べ物か調理器具か判断するための値</returns>
	int GetIndentValue()
	{
		return m_identification;
	}

	/// <summary>
	/// スープっぽいオブジェクトを生成する。
	/// </summary>
	/// <param name="belongings">置いてあるもの</param>
	void SetSoupBase(Belongings* belongings);

	/// <summary>	
	/// 食べ物の状態。
	/// </summary>
	enum state
	{
		enHave,				//持たれている状態。
		enPutting,			//置かれている状態。
		enCutting,			//切られている状態。
	};

	/// <summary>
	/// 食べ物の状態をセットする。
	/// </summary>
	/// <param name="foodsState">食べ物の状態</param>
	void SetState(state foodsState)
	{
		m_foodState = static_cast<state>(foodsState);
	}

	/// <summary>
	/// オブジェクトがどの系統に属するか。
	/// </summary>
	enum IdentificationValue
	{
		enFood,				//食べ物。
		enKitchenWare,		//調理器具。
		enDish				//お皿。
	};

protected:		

	bool m_CuttingModel = false;			//切られたモデルになっているか。
														//todo コンストラクタ設定めんどい。
	IdentificationValue m_identification = enFood;		//オブジェクト系統の設定。(各クラスのコンストラクタで設定してあげる必要がある)。

	state m_foodState = enPutting;			//食べ物の状態。

private:




};

